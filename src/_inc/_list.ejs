<div id="wrapper" class="style-wrapper">
    <h2 class="s-header--2">聖騎士一覧</h2>
    <table class="filter_table s-table">
        <tbody>
            <tr><th>レア</th>
            <td>
                <ul class="filter_container" data-filter="rare" data-count="3">
                    <li data-val="SSR" data-check="0"><div>SSR</div></li>
                    <li data-val="SR" data-check="0"><div>SR</div></li>
                    <li data-val="R" data-check="0"><div>R</div></li>
                </ul>
            </td></tr>
            <tr><th>役割</th>
            <td>
                <ul class="filter_container" data-filter="role_set" data-count="3">
                    <li data-val="タンク" data-check="0"><div>タンク</div></li>
                    <li data-val="アタック" data-check="0"><div>アタック</div></li>
                    <li data-val="サポート" data-check="0"><div>サポート</div></li>
                </ul>
            </td></tr>           
            <tr><th>属性</th>
            <td>
                <ul class="filter_container" data-filter="attr" data-count="6">
                    <li data-val="火" data-check="0"><div>火</div></li>
                    <li data-val="水" data-check="0"><div>水</div></li>
                    <li data-val="風" data-check="0"><div>風</div></li>
                    <li data-val="聖" data-check="0"><div>聖</div></li>
                    <li data-val="魔" data-check="0"><div>魔</div></li>
                    <li data-val="想" data-check="0"><div>想</div></li>
                </ul>
            </td></tr>
            <tr><th>攻撃タイプ</th>
            <td>
                <ul class="filter_container" data-filter="atk_attr" data-count="2">
                    <li data-val="物理" data-check="0"><div>物理攻撃</div></li>
                    <li data-val="魔法" data-check="0"><div>魔法攻撃</div></li>
                </ul>
            </td></tr>
            <tr><th>奥義</th>
            <td>
<%-
    include('./_ub_buttons.ejs', {
        def: json.def
    });
%>
            </td>
            </tr>
            <tr><th>スキル</th>
            <td>
<%-
    include('./_sk_buttons.ejs', { 
        def: json.def
    });
%>
            </td>
            </tr>
            <tr><th>武器</th>
            <td>
                <ul class="filter_container" data-filter="equip_type" data-count="5">
                    <li data-val="斬" data-check="0"><div>斬</div></li>
                    <li data-val="打" data-check="0"><div>打</div></li>
                    <li data-val="突" data-check="0"><div>突</div></li>
                    <li data-val="射" data-check="0"><div>射</div></li>
                    <li data-val="投" data-check="0"><div>投</div></li>
                </ul>
            </td></tr>
            <tr><th>サポート</th>
            <td>
                <ul class="filter_container" data-filter="support" data-count="6">
                    <li data-val="最大HP" data-check="0"><div>HP+</div></li>
                    <li data-val="物理攻撃,魔法攻撃" data-check="0"><div>攻撃+</div></li>
                    <li data-val="物理防御,魔法防御" data-check="0"><div>防御+</div></li>
                    <li data-val="物理クリティカル,魔法クリティカル" data-check="0"><div>クリ+</div></li>
                    <li data-val="命中" data-check="0"><div>命中+</div></li>
                    <li data-val="ブロック" data-check="0"><div>ブロック+</div></li>
                </ul>
            </td>
            </tr>
            <tr><th>行動速度</th>
            <td>
                <ul class="filter_container" data-filter="atk_speed" data-count="5">
                    <li data-val="早い" data-check="0"><div>早い</div></li>
                    <li data-val="やや早い" data-check="0"><div>やや早い</div></li>
                    <li data-val="普通" data-check="0"><div>普通</div></li>
                    <li data-val="やや遅い" data-check="0"><div>やや遅い</div></li>
                    <li data-val="遅い" data-check="0"><div>遅い</div></li>
                </ul>
            </td></tr>
            <tr><th>召喚</th>
            <td>
                <ul class="filter_container" data-filter="gacha_type" data-count="10">
                    <li data-val="恒常" data-check="0"><div>恒常</div></li>
                    <li data-val="イベント" data-check="0"><div>限定イベ</div></li>
                    <li data-val="バーストフェス" data-check="0"><div>バーストフェス</div></li>
                    <li data-val="無限討伐戦" data-check="0"><div>無限討伐戦</div></li>
                    <li data-val="疾走討伐戦" data-check="0"><div>疾走討伐戦</div></li>
                    <li data-val="試練の塔" data-check="0"><div>試練の塔</div></li>
                    <li data-val="同盟戦" data-check="0"><div>同盟戦</div></li>
                    <li data-val="Fanzine" data-check="0"><div>Fanzine</div></li>
                    <li data-val="シーズンパス" data-check="0"><div>シーズンパス</div></li>
                    <li data-val="報酬" data-check="0"><div>イベ配布など</div></li>
                </ul>
            </td></tr>
            <tr><th>実装年</th>
            <td>
                <ul class="filter_container" data-filter="added_year" data-count="3">
                    <li data-val="2025" data-check="0"><div>2025</div></li>
                    <li data-val="2024" data-check="0"><div>2024</div></li>
                    <li data-val="2023" data-check="0"><div>2023</div></li>
                </ul>
            </td></tr>
        </tbody>
    </table>

    <ul class="tab_container" data-length="4">
        <li data-tab="レア" data-check="1">レア別</li>
        <li data-tab="実装順" data-check="0">実装順</li>
        <li data-tab="隊列順" data-check="0">隊列順</li>
        <li data-tab="Tier順" data-check="0">Tier順</li>
    </ul>
    <table class="s-table">
        <tbody>
<%-
    include('./_order_by_rare.ejs');
%>
<%-
    include('./_order_by_no.ejs');
%>
<%-
    include('./_order_by_range.ejs');
%>
<%-
    include('./_order_by_tier.ejs');
%>
        </tbody>
    </table>
    <div class="no_result">該当なし</div>
</div>

<script>

function switchTarget(container, fromRange, toRange) {
    const ul = container.parentElement;
    const lis = ul.querySelectorAll('li[data-range]');

    // 0個選択 (全て状態) の場合
    if (!toRange) {
        lis.forEach(li => {
            li.style.display = ''; // show
        });
        return;
    }

    // 引き継ぎ: fromRange の選択を toRange に移す
    if (fromRange) {
        ul.querySelectorAll(`li[data-range="${fromRange}"]`).forEach(li => {
            if (li.getAttribute('data-check') === "1") {
                const name = li.dataset.name;
                const targetLi = ul.querySelector(`li[data-range="${toRange}"][data-name="${name}"]`);
                if (targetLi) {
                    targetLi.setAttribute('data-check', "1");
                }
            }
        });

        // 元のをリセット
        ul.querySelectorAll(`li[data-range="${fromRange}"]`).forEach(li => {
            li.setAttribute('data-check', "0");
        });
    }

    // 表示切り替え
    lis.forEach(li => {
        const liRange = li.dataset.range;
        if (liRange === toRange) {
            li.style.display = '';
        } else {
            li.style.display = 'none';
            li.setAttribute('data-check', "0");
        }
    });
}

function hero_search() {
    const conditions = {};

    // --- フィルター条件の収集 ---
    document.querySelectorAll(".filter_container").forEach(container => {
        const currentKey = container.dataset.filter;
        container.querySelectorAll("li[data-check='1']").forEach(li => {
            if (!conditions[currentKey]) conditions[currentKey] = [];
            const vals = li.dataset.val.split(",");

            if (currentKey === "support" || currentKey === "sk_type") {
                // ボタンごとの集合 [[0], [1,2], [3,4,5]]
                conditions[currentKey].push(vals);
            } else {
                // 通常 [0, 1, 2, 3, 4]
                conditions[currentKey].push(...vals);
            }
        });
    });

    // --- OR 判定関数 ---
    const matchOR = (dataArray, conditionArray) => dataArray.some(v => conditionArray.includes(v));

    // --- AND 判定関数 (ボタン内 OR x ボタン間 AND)---
    const matchAND = (dataArray, conditionGroups) =>
        conditionGroups.every(group => matchOR(dataArray, group));

    let total_count = 0;

    document.querySelectorAll(".hero_container").forEach(container => {
        const containerVal = container.dataset.val;
        let disp_count = 0;

        container.querySelectorAll("li").forEach(li => {
            let disp_bool = true;

            for (const type in conditions) {
                const currentData = li.dataset[type].split(',');

                if (type === "gacha_type" || type === "ub_type") {
                    if (!matchOR(currentData, conditions[type])) {
                        disp_bool = false;
                        break;
                    }
                } else if (type === "support" || type === "sk_type") {
                    if (!matchAND(currentData, conditions[type])) {
                        disp_bool = false;
                        break;
                    }
                } else {
                    if (!conditions[type].includes(currentData[0])) {
                        disp_bool = false;
                        break;
                    }
                }
            }

            li.setAttribute("data-disp", disp_bool ? 1 : 0);
            if (disp_bool) disp_count++;
        });

        if (containerVal !== undefined) {
            const containerTab = container.dataset.tab || "";
            const heroTrSelector = `.hero_tr${containerTab ? `[data-tab='${containerTab}']` : ""}[data-val='${containerVal}']`;
            const heroTr = document.querySelector(heroTrSelector);
            if (heroTr) {
                heroTr.setAttribute("data-disp_val", disp_count ? 1 : 0);
            }
        }
        total_count += disp_count;
    });

    document.querySelector(".no_result").style.display = total_count === 0 ? 'block' : 'none';
}

/**
 * @param {HTMLElement} tab
 */
function tabSwitch(tab) {
    const current_check = tab.getAttribute("data-check");
    if (current_check == 0) {
        tab.setAttribute("data-check", 1);
        tab.parentElement.querySelectorAll('li').forEach(sibling => {
            if (sibling !== tab) {
                sibling.setAttribute("data-check", 0);
            }
        });

        const current_tab = tab.dataset.tab;
        document.querySelectorAll(".hero_tr").forEach(tr => {
            if (tr.dataset.tab === current_tab) {
                tr.setAttribute("data-disp_tab", 1);
            } else {
                tr.setAttribute("data-disp_tab", 0);
            }
        });
    }
}

// --- Event bindings ---
document.querySelectorAll('.target-button').forEach(button => {
    button.addEventListener('click', function() {
        const container = this.closest('.target-container');
        const buttons = container.querySelectorAll('.target-button');
        const current = container.querySelector('.target-button.active');
        const fromRange = current ? current.dataset.range : null;
        const toRange = this.dataset.range;

        if (current && current === this) {
            current.classList.remove('active');
            switchTarget(container, fromRange, null);
        } else {
            buttons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            switchTarget(container, fromRange, toRange);
        }

        hero_search();
    });
});

document.querySelectorAll('.filter_container > li').forEach(li => {
    li.addEventListener('click', function() {
        const current_check = this.getAttribute("data-check");
        this.setAttribute("data-check", current_check == 0 ? 1 : 0);
        hero_search();
    });
});

document.querySelectorAll(".tab_container > li").forEach(li => {
    li.addEventListener("click", function() {
        tabSwitch(this);
    });
});

document.querySelector(".tab_container > li:first-child").click();
</script>
